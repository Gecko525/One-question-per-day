//什么是跨域？
//跨域其实就是和浏览器的同源策略密不可分的，而同源策略其实是浏览核心的安全功能，否则会受到XSS，CSRF等攻击。而同源是指“协议”，“域名”，“端口”，三者都必须相同，即使两个域名指向同一个ip也非同源。

````````````````````````````````````````````````````````````````````````````````````````````
//域名的构成？
//http://www.a.com:8080       http:协议  www：主域名  a.com：子域名  8080：端口号

````````````````````````````````````````````````````````````````````````````````````````````
//跨域限制了那些行为？
// 1，cookie，localstorage，indexDB无法读取
// 2，ajax能发送成功但是被浏览器拦截
// 3，dom和js无法获取

````````````````````````````````````````````````````````````````````````````````````````````
//跨域的解决办法 

//1. jsonp
//jsonp原理：利用<script>没有跨域限制的漏洞，可以再不同域名下请求资源。
//jsonp实现方式：
    //原生实现:
        let script = document.createElement('script'); //创建script标签
        script.src = 'http://www.nealyang.cn/login?username=Nealyang&callback=callback'; //传入地址和参数以及回调函数 用&隔开
        document.body.appendChild(script);//移除script标签
        function callback(res) { //回调函数响应
             console.log(res);
        }
    //jq实现：
    $.ajax({
        url:'http://www.nealyang.cn/login',
        type:'GET',
        dataType:'jsonp',//请求方式为jsonp
        data:{
            "username":"Nealyang"
        },
        success:function (data){
            console.log(data);
        }
    })
//jsonp优缺点：兼容性好但是支持get请求方式

````````````````````````````````````````````````````````````````````````````````````````````

//2. CORS（跨资源共享）
//CORS 原理：是一个W3C标准，他允许浏览器向跨源服务器发送XMLHttpRequest请求，从而克服了AJAX不能同源使用的限制。
//CORS 实现：目前浏览器（ie>=10）都支持，而且是浏览器自动完成。所以需要后端设置Access-Control-Allow-Origin就可以开启CORS，该属性表示可以访问那些资源，如果设置*（通配符）则表示所有网站都可以访问。
//CORS 优缺点：CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案

````````````````````````````````````````````````````````````````````````````````````````````
//3. nginx反向代理
// 正向代理与反向代理的区别是什么？
// 正向代理：也可以理解成代理的客户端。就是客户端想要获取一个服务器的内容，需要借助代理来转发客户端的请求。也就是我们说的vpn或者Shadowsocks
// 反向代理：可以理解成代理的服务端。用户不知道真正的服务端，只知道代理的服务器，我们向服务器发送请求，代理服务器会把我们请求转发给真正的服务器上。比如nginx他可以把我们的请求用负载均衡实现来转发到各个真正的服务器上。
// nginx反向代理原理：同源策略只是针对于浏览器，服务器之间的传输（调用http接口）是不受同源策略影响的。
// nginx实现： nginx配置：
//    server{
//        // # 监听9099端口
//         listen 9099;
//        // # 监听指定的地址
//         server_name localhost;
//         //#凡是localhost:9099这个样子的，都转发到真正的服务端地址http://localhost:9871 
//         location ^~ /api { //转到的目标的ip地址
//             proxy_pass http://localhost:9871;
//         }    
//     }
//nginx反向代理 优缺点：是最简单的跨域方式，只需要配置nginx即可。还能实现负载均衡。